/*
    gpviz2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    gpviz2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with gpviz2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_predict_gauss_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_predict_gauss");
    reader.add_event(118, 118, "end", "model_predict_gauss");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
gp_pred_rng(const std::vector<T0__>& x1,
                const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y1,
                const std::vector<T2__>& x2,
                const T3__& alpha,
                const T4__& rho,
                const T5__& sigma,
                const T6__& delta, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        int N1(0);
        (void) N1;  // dummy to suppress unused var warning

        stan::math::fill(N1, std::numeric_limits<int>::min());
        stan::math::assign(N1,size(x1));
        current_statement_begin__ = 10;
        int N2(0);
        (void) N2;  // dummy to suppress unused var warning

        stan::math::fill(N2, std::numeric_limits<int>::min());
        stan::math::assign(N2,size(x2));
        current_statement_begin__ = 11;
        validate_non_negative_index("f2_mu", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  f2_mu(static_cast<Eigen::VectorXd::Index>(N2));
        (void) f2_mu;  // dummy to suppress unused var warning

        stan::math::initialize(f2_mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(f2_mu,DUMMY_VAR__);
        current_statement_begin__ = 12;
        validate_non_negative_index("f2", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  f2(static_cast<Eigen::VectorXd::Index>(N2));
        (void) f2;  // dummy to suppress unused var warning

        stan::math::initialize(f2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(f2,DUMMY_VAR__);
        current_statement_begin__ = 13;
        validate_non_negative_index("f2_prime_mu", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  f2_prime_mu(static_cast<Eigen::VectorXd::Index>(N2));
        (void) f2_prime_mu;  // dummy to suppress unused var warning

        stan::math::initialize(f2_prime_mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(f2_prime_mu,DUMMY_VAR__);
        current_statement_begin__ = 14;
        validate_non_negative_index("f2_prime_var", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  f2_prime_var(static_cast<Eigen::VectorXd::Index>(N2));
        (void) f2_prime_var;  // dummy to suppress unused var warning

        stan::math::initialize(f2_prime_var, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(f2_prime_var,DUMMY_VAR__);
        current_statement_begin__ = 15;
        validate_non_negative_index("f2_stat", "3", 3);
        validate_non_negative_index("f2_stat", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  f2_stat(static_cast<Eigen::VectorXd::Index>(3),static_cast<Eigen::VectorXd::Index>(N2));
        (void) f2_stat;  // dummy to suppress unused var warning

        stan::math::initialize(f2_stat, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(f2_stat,DUMMY_VAR__);


        {
        current_statement_begin__ = 17;
        validate_non_negative_index("L_K", "N1", N1);
        validate_non_negative_index("L_K", "N1", N1);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L_K(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N1));
        (void) L_K;  // dummy to suppress unused var warning

        stan::math::initialize(L_K, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(L_K,DUMMY_VAR__);
        current_statement_begin__ = 18;
        validate_non_negative_index("L_div_y1", "N1", N1);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  L_div_y1(static_cast<Eigen::VectorXd::Index>(N1));
        (void) L_div_y1;  // dummy to suppress unused var warning

        stan::math::initialize(L_div_y1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(L_div_y1,DUMMY_VAR__);
        current_statement_begin__ = 19;
        validate_non_negative_index("k_x1_x2", "N1", N1);
        validate_non_negative_index("k_x1_x2", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  k_x1_x2(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N2));
        (void) k_x1_x2;  // dummy to suppress unused var warning

        stan::math::initialize(k_x1_x2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(k_x1_x2,DUMMY_VAR__);
        current_statement_begin__ = 20;
        validate_non_negative_index("x_diff", "N1", N1);
        validate_non_negative_index("x_diff", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  x_diff(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N2));
        (void) x_diff;  // dummy to suppress unused var warning

        stan::math::initialize(x_diff, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(x_diff,DUMMY_VAR__);
        current_statement_begin__ = 21;
        validate_non_negative_index("k_x1_x2_p", "N1", N1);
        validate_non_negative_index("k_x1_x2_p", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  k_x1_x2_p(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N2));
        (void) k_x1_x2_p;  // dummy to suppress unused var warning

        stan::math::initialize(k_x1_x2_p, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(k_x1_x2_p,DUMMY_VAR__);
        current_statement_begin__ = 22;
        validate_non_negative_index("L_div_k_x1_x2", "N1", N1);
        validate_non_negative_index("L_div_k_x1_x2", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L_div_k_x1_x2(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N2));
        (void) L_div_k_x1_x2;  // dummy to suppress unused var warning

        stan::math::initialize(L_div_k_x1_x2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(L_div_k_x1_x2,DUMMY_VAR__);
        current_statement_begin__ = 23;
        validate_non_negative_index("L_div_k_x1_x2_p", "N1", N1);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  L_div_k_x1_x2_p(static_cast<Eigen::VectorXd::Index>(N1));
        (void) L_div_k_x1_x2_p;  // dummy to suppress unused var warning

        stan::math::initialize(L_div_k_x1_x2_p, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(L_div_k_x1_x2_p,DUMMY_VAR__);
        current_statement_begin__ = 24;
        validate_non_negative_index("f2_cov", "N2", N2);
        validate_non_negative_index("f2_cov", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  f2_cov(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(N2));
        (void) f2_cov;  // dummy to suppress unused var warning

        stan::math::initialize(f2_cov, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(f2_cov,DUMMY_VAR__);
        current_statement_begin__ = 25;
        validate_non_negative_index("diag_delta", "N2", N2);
        validate_non_negative_index("diag_delta", "N2", N2);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  diag_delta(static_cast<Eigen::VectorXd::Index>(N2),static_cast<Eigen::VectorXd::Index>(N2));
        (void) diag_delta;  // dummy to suppress unused var warning

        stan::math::initialize(diag_delta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(diag_delta,DUMMY_VAR__);
        current_statement_begin__ = 26;
        validate_non_negative_index("K", "N1", N1);
        validate_non_negative_index("K", "N1", N1);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  K(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N1));
        (void) K;  // dummy to suppress unused var warning

        stan::math::initialize(K, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(K,DUMMY_VAR__);


        current_statement_begin__ = 28;
        stan::math::assign(K, add(cov_exp_quad(x1,alpha,rho),multiply(diag_matrix(rep_vector(1,N1)),square(sigma))));
        current_statement_begin__ = 29;
        stan::math::assign(L_K, cholesky_decompose(K));
        current_statement_begin__ = 30;
        stan::math::assign(k_x1_x2, cov_exp_quad(x1,x2,alpha,rho));
        current_statement_begin__ = 31;
        stan::math::assign(L_div_k_x1_x2, mdivide_left_tri_low(L_K,k_x1_x2));
        current_statement_begin__ = 32;
        stan::math::assign(L_div_y1, mdivide_left_tri_low(L_K,y1));
        current_statement_begin__ = 34;
        stan::math::assign(f2_mu, multiply(transpose(L_div_k_x1_x2),L_div_y1));
        current_statement_begin__ = 35;
        stan::math::assign(f2_cov, subtract(cov_exp_quad(x2,alpha,rho),multiply(transpose(L_div_k_x1_x2),L_div_k_x1_x2)));
        current_statement_begin__ = 37;
        stan::math::assign(diag_delta, diag_matrix(rep_vector(delta,N2)));
        current_statement_begin__ = 38;
        stan::math::assign(f2, multi_normal_rng(f2_mu,add(f2_cov,diag_delta), base_rng__));
        current_statement_begin__ = 40;
        for (int i = 1; i <= N1; ++i) {

            current_statement_begin__ = 41;
            for (int j = 1; j <= N2; ++j) {

                current_statement_begin__ = 42;
                stan::math::assign(get_base1_lhs(x_diff,i,j,"x_diff",1), (get_base1(x1,i,"x1",1) - get_base1(x2,j,"x2",1)));
            }
        }
        current_statement_begin__ = 46;
        stan::math::assign(k_x1_x2_p, elt_multiply(multiply((1 / square(rho)),x_diff),k_x1_x2));
        current_statement_begin__ = 48;
        for (int i = 1; i <= N2; ++i) {

            current_statement_begin__ = 49;
            stan::math::assign(L_div_k_x1_x2_p, mdivide_left_tri_low(L_K,stan::model::rvalue(k_x1_x2_p, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "k_x1_x2_p")));
            current_statement_begin__ = 50;
            stan::math::assign(get_base1_lhs(f2_prime_mu,i,"f2_prime_mu",1), multiply(transpose(L_div_k_x1_x2_p),L_div_y1));
            current_statement_begin__ = 51;
            stan::math::assign(get_base1_lhs(f2_prime_var,i,"f2_prime_var",1), sqrt((square((alpha / rho)) - multiply(transpose(L_div_k_x1_x2_p),L_div_k_x1_x2_p))));
        }
        current_statement_begin__ = 54;
        stan::math::assign(get_base1_lhs(f2_stat,1,"f2_stat",1), to_row_vector(f2));
        current_statement_begin__ = 55;
        stan::math::assign(get_base1_lhs(f2_stat,2,"f2_stat",1), to_row_vector(f2_prime_mu));
        current_statement_begin__ = 56;
        stan::math::assign(get_base1_lhs(f2_stat,3,"f2_stat",1), to_row_vector(f2_prime_var));
        }
        current_statement_begin__ = 58;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f2_stat);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gp_pred_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const std::vector<T0__>& x1,
                const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y1,
                const std::vector<T2__>& x2,
                const T3__& alpha,
                const T4__& rho,
                const T5__& sigma,
                const T6__& delta, RNG& base_rng__, std::ostream* pstream__) const {
        return gp_pred_rng(x1, y1, x2, alpha, rho, sigma, delta, base_rng__, pstream__);
    }
};

#include <meta_header.hpp>
 class model_predict_gauss : public prob_grad {
private:
    int N1;
    int N2;
    vector<double> x1;
    vector_d y1;
    vector<double> x2;
    double rho_alpha;
    double rho_beta;
    double alpha_mean;
    double alpha_sd;
    double sigma_mean;
    double sigma_sd;
    double delta;
    vector_d mu;
public:
    model_predict_gauss(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_predict_gauss(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_predict_gauss_namespace::model_predict_gauss";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "N1", "int", context__.to_vec());
            N1 = int(0);
            vals_i__ = context__.vals_i("N1");
            pos__ = 0;
            N1 = vals_i__[pos__++];
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
            N2 = int(0);
            vals_i__ = context__.vals_i("N2");
            pos__ = 0;
            N2 = vals_i__[pos__++];
            current_statement_begin__ = 65;
            validate_non_negative_index("x1", "N1", N1);
            context__.validate_dims("data initialization", "x1", "double", context__.to_vec(N1));
            validate_non_negative_index("x1", "N1", N1);
            x1 = std::vector<double>(N1,double(0));
            vals_r__ = context__.vals_r("x1");
            pos__ = 0;
            size_t x1_limit_0__ = N1;
            for (size_t i_0__ = 0; i_0__ < x1_limit_0__; ++i_0__) {
                x1[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 66;
            validate_non_negative_index("y1", "N1", N1);
            context__.validate_dims("data initialization", "y1", "vector_d", context__.to_vec(N1));
            validate_non_negative_index("y1", "N1", N1);
            y1 = vector_d(static_cast<Eigen::VectorXd::Index>(N1));
            vals_r__ = context__.vals_r("y1");
            pos__ = 0;
            size_t y1_i_vec_lim__ = N1;
            for (size_t i_vec__ = 0; i_vec__ < y1_i_vec_lim__; ++i_vec__) {
                y1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 67;
            validate_non_negative_index("x2", "N2", N2);
            context__.validate_dims("data initialization", "x2", "double", context__.to_vec(N2));
            validate_non_negative_index("x2", "N2", N2);
            x2 = std::vector<double>(N2,double(0));
            vals_r__ = context__.vals_r("x2");
            pos__ = 0;
            size_t x2_limit_0__ = N2;
            for (size_t i_0__ = 0; i_0__ < x2_limit_0__; ++i_0__) {
                x2[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 68;
            context__.validate_dims("data initialization", "rho_alpha", "double", context__.to_vec());
            rho_alpha = double(0);
            vals_r__ = context__.vals_r("rho_alpha");
            pos__ = 0;
            rho_alpha = vals_r__[pos__++];
            current_statement_begin__ = 69;
            context__.validate_dims("data initialization", "rho_beta", "double", context__.to_vec());
            rho_beta = double(0);
            vals_r__ = context__.vals_r("rho_beta");
            pos__ = 0;
            rho_beta = vals_r__[pos__++];
            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "alpha_mean", "double", context__.to_vec());
            alpha_mean = double(0);
            vals_r__ = context__.vals_r("alpha_mean");
            pos__ = 0;
            alpha_mean = vals_r__[pos__++];
            current_statement_begin__ = 71;
            context__.validate_dims("data initialization", "alpha_sd", "double", context__.to_vec());
            alpha_sd = double(0);
            vals_r__ = context__.vals_r("alpha_sd");
            pos__ = 0;
            alpha_sd = vals_r__[pos__++];
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "sigma_mean", "double", context__.to_vec());
            sigma_mean = double(0);
            vals_r__ = context__.vals_r("sigma_mean");
            pos__ = 0;
            sigma_mean = vals_r__[pos__++];
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "sigma_sd", "double", context__.to_vec());
            sigma_sd = double(0);
            vals_r__ = context__.vals_r("sigma_sd");
            pos__ = 0;
            sigma_sd = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 63;
            check_greater_or_equal(function__,"N1",N1,1);
            current_statement_begin__ = 64;
            check_greater_or_equal(function__,"N2",N2,1);
            current_statement_begin__ = 65;
            current_statement_begin__ = 66;
            current_statement_begin__ = 67;
            current_statement_begin__ = 68;
            check_greater_or_equal(function__,"rho_alpha",rho_alpha,0);
            current_statement_begin__ = 69;
            check_greater_or_equal(function__,"rho_beta",rho_beta,0);
            current_statement_begin__ = 70;
            check_greater_or_equal(function__,"alpha_mean",alpha_mean,0);
            current_statement_begin__ = 71;
            check_greater_or_equal(function__,"alpha_sd",alpha_sd,0);
            current_statement_begin__ = 72;
            check_greater_or_equal(function__,"sigma_mean",sigma_mean,0);
            current_statement_begin__ = 73;
            check_greater_or_equal(function__,"sigma_sd",sigma_sd,0);
            // initialize data variables
            current_statement_begin__ = 77;
            delta = double(0);
            stan::math::fill(delta,DUMMY_VAR__);
            stan::math::assign(delta,1.0000000000000001e-009);
            current_statement_begin__ = 78;
            validate_non_negative_index("mu", "N1", N1);
            mu = vector_d(static_cast<Eigen::VectorXd::Index>(N1));
            stan::math::fill(mu,DUMMY_VAR__);

            current_statement_begin__ = 79;
            for (int n = 1; n <= N1; ++n) {
                current_statement_begin__ = 79;
                stan::math::assign(get_base1_lhs(mu,n,"mu",1), 0);
            }

            // validate transformed data
            current_statement_begin__ = 77;
            current_statement_begin__ = 78;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 83;
            ++num_params_r__;
            current_statement_begin__ = 84;
            ++num_params_r__;
            current_statement_begin__ = 85;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_predict_gauss() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "double", context__.to_vec());
        double rho(0);
        rho = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            T__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_lb_constrain(0,lp__);
            else
                alpha = in__.scalar_lb_constrain(0);

            T__ rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.scalar_lb_constrain(0,lp__);
            else
                rho = in__.scalar_lb_constrain(0);

            T__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 89;
            validate_non_negative_index("Sigma", "N1", N1);
            validate_non_negative_index("Sigma", "N1", N1);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Sigma(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N1));
            (void) Sigma;  // dummy to suppress unused var warning

            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma,DUMMY_VAR__);
            current_statement_begin__ = 90;
            validate_non_negative_index("L_S", "N1", N1);
            validate_non_negative_index("L_S", "N1", N1);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  L_S(static_cast<Eigen::VectorXd::Index>(N1),static_cast<Eigen::VectorXd::Index>(N1));
            (void) L_S;  // dummy to suppress unused var warning

            stan::math::initialize(L_S, DUMMY_VAR__);
            stan::math::fill(L_S,DUMMY_VAR__);


            current_statement_begin__ = 92;
            stan::math::assign(Sigma, add(cov_exp_quad(x1,alpha,rho),multiply(diag_matrix(rep_vector(1,N1)),square(sigma))));
            current_statement_begin__ = 94;
            stan::math::assign(L_S, cholesky_decompose(Sigma));
            current_statement_begin__ = 95;
            lp_accum__.add(multi_normal_cholesky_log<propto__>(y1, mu, L_S));
            current_statement_begin__ = 97;
            lp_accum__.add(inv_gamma_log<propto__>(rho, rho_alpha, rho_beta));
            current_statement_begin__ = 98;
            lp_accum__.add(normal_log<propto__>(alpha, alpha_mean, alpha_sd));
            current_statement_begin__ = 99;
            lp_accum__.add(normal_log<propto__>(sigma, sigma_mean, sigma_sd));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("rho");
        names__.push_back("sigma");
        names__.push_back("f2_stat");
        names__.push_back("f2");
        names__.push_back("fp2");
        names__.push_back("f2_prime_mu");
        names__.push_back("f2_prime_var");
        names__.push_back("f2_prime");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(N2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_predict_gauss_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha = in__.scalar_lb_constrain(0);
        double rho = in__.scalar_lb_constrain(0);
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);
        vars__.push_back(rho);
        vars__.push_back(sigma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 103;
            validate_non_negative_index("f2_stat", "3", 3);
            validate_non_negative_index("f2_stat", "N2", N2);
            matrix_d f2_stat(static_cast<Eigen::VectorXd::Index>(3),static_cast<Eigen::VectorXd::Index>(N2));
            (void) f2_stat;  // dummy to suppress unused var warning

            stan::math::initialize(f2_stat, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(f2_stat,DUMMY_VAR__);
            current_statement_begin__ = 104;
            validate_non_negative_index("f2", "N2", N2);
            vector_d f2(static_cast<Eigen::VectorXd::Index>(N2));
            (void) f2;  // dummy to suppress unused var warning

            stan::math::initialize(f2, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(f2,DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("fp2", "N2", N2);
            vector_d fp2(static_cast<Eigen::VectorXd::Index>(N2));
            (void) fp2;  // dummy to suppress unused var warning

            stan::math::initialize(fp2, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(fp2,DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("f2_prime_mu", "N2", N2);
            vector_d f2_prime_mu(static_cast<Eigen::VectorXd::Index>(N2));
            (void) f2_prime_mu;  // dummy to suppress unused var warning

            stan::math::initialize(f2_prime_mu, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(f2_prime_mu,DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("f2_prime_var", "N2", N2);
            vector_d f2_prime_var(static_cast<Eigen::VectorXd::Index>(N2));
            (void) f2_prime_var;  // dummy to suppress unused var warning

            stan::math::initialize(f2_prime_var, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(f2_prime_var,DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("f2_prime", "N2", N2);
            vector_d f2_prime(static_cast<Eigen::VectorXd::Index>(N2));
            (void) f2_prime;  // dummy to suppress unused var warning

            stan::math::initialize(f2_prime, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(f2_prime,DUMMY_VAR__);


            current_statement_begin__ = 109;
            stan::math::assign(f2_stat, gp_pred_rng(x1,y1,x2,alpha,rho,sigma,delta, base_rng__, pstream__));
            current_statement_begin__ = 110;
            stan::math::assign(f2, transpose(get_base1(f2_stat,1,"f2_stat",1)));
            current_statement_begin__ = 111;
            stan::math::assign(f2_prime_mu, transpose(get_base1(f2_stat,2,"f2_stat",1)));
            current_statement_begin__ = 112;
            stan::math::assign(f2_prime_var, transpose(get_base1(f2_stat,3,"f2_stat",1)));
            current_statement_begin__ = 114;
            for (int n2 = 1; n2 <= N2; ++n2) {

                current_statement_begin__ = 115;
                stan::math::assign(get_base1_lhs(fp2,n2,"fp2",1), normal_rng(get_base1(f2,n2,"f2",1),sigma, base_rng__));
                current_statement_begin__ = 116;
                stan::math::assign(get_base1_lhs(f2_prime,n2,"f2_prime",1), normal_rng(get_base1(f2_prime_mu,n2,"f2_prime_mu",1),get_base1(f2_prime_var,n2,"f2_prime_var",1), base_rng__));
            }

            // validate generated quantities
            current_statement_begin__ = 103;
            current_statement_begin__ = 104;
            current_statement_begin__ = 105;
            current_statement_begin__ = 106;
            current_statement_begin__ = 107;
            current_statement_begin__ = 108;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < N2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 3; ++k_0__) {
                vars__.push_back(f2_stat(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
            vars__.push_back(f2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
            vars__.push_back(fp2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
            vars__.push_back(f2_prime_mu[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
            vars__.push_back(f2_prime_var[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
            vars__.push_back(f2_prime[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_predict_gauss";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= N2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f2_stat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fp2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f2_prime_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f2_prime_var" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f2_prime" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= N2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 3; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f2_stat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fp2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f2_prime_mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f2_prime_var" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f2_prime" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_predict_gauss_namespace::model_predict_gauss stan_model;


#endif
